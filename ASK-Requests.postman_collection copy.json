{
    "info": {
        "_postman_id": "1a16efff-0091-494f-b3db-8e43c7e3498c",
        "name": "ASK-Tests",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
        "_exporter_id": "36980691"
    },
    "item": [
        {
            "name": "/sign-up - [S] Register new student",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status code is 200\", function () {\r",
                            "    pm.response.to.have.status(200);\r",
                            "});\r",
                            "\r",
                            "pm.test(\"Body matches string - User was created\", function () {\r",
                            "    pm.expect(pm.response.text()).to.include(\"User was created\");\r",
                            "});"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"email\": \"{{studentEmail}}\",\r\n  \"name\": \"Olga Black\",\r\n  \"password\": \"{{studentPassword}}\",\r\n  \"group\": \"XYZ\" \r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/sign-up",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "sign-up"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "localhost:3000/ -activationCode after registration",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status code is 200\", function () {\r",
                            "    pm.response.to.have.status(200);\r",
                            "});\r",
                            "\r",
                            "var jsonData = pm.response.json();\r",
                            "\r",
                            "pm.environment.set(\"studentId\", jsonData[0].id);\r",
                            "pm.environment.set(\"activationCode\", jsonData[0].activationCode);"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                    }
                }
            ],
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "localhost:3000/api/users?_where=(email,eq,{{studentEmail}})",
                    "host": [
                        "localhost"
                    ],
                    "port": "3000",
                    "path": [
                        "api",
                        "users"
                    ],
                    "query": [
                        {
                            "key": "_where",
                            "value": "(email,eq,{{studentEmail}})"
                        }
                    ]
                }
            },
            "response": []
        },
        {
            "name": "/activate/:id/:actCode",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status code is 200\", function () {\r",
                            "    pm.response.to.have.status(200);\r",
                            "});\r",
                            "\r",
                            "pm.test(\"Body matches string - User was activated\", function () {\r",
                            "    pm.expect(pm.response.text()).to.include(\"User was activated\");\r",
                            "});"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                    }
                }
            ],
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{baseUrl}}/activate/{{studentId}}/{{activationCode}}",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "activate",
                        "{{studentId}}",
                        "{{activationCode}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "/sign-in - [S] - Negative",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status code is 404\", function () {\r",
                            "    pm.response.to.have.status(404);\r",
                            "});\r",
                            "\r",
                            "pm.test(\"Response time is less than 500 ms\", function () {\r",
                            "    pm.expect(pm.response.responseTime).to.be.below(500);\r",
                            "});\r",
                            "\r",
                            "pm.test(\"Body matches user role - Authentication failed. User not found or password does not match\", function () {\r",
                            "    pm.expect(pm.response.text()).to.include(\"Authentication failed. User not found or password does not match\");\r",
                            "});"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"email\": \"{{studentEmail}}\",\r\n  \"password\": \"123444123\"\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/sign-in",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "sign-in"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "/sign-in - [S]",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status code is 200\", function () {\r",
                            "    pm.response.to.have.status(200);\r",
                            "});\r",
                            "\r",
                            "pm.test(\"Response time is less than 200 ms\", function () {\r",
                            "    pm.expect(pm.response.responseTime).to.be.below(200);\r",
                            "});\r",
                            "\r",
                            "pm.test(\"Body matches user role - STUDENT\", function () {\r",
                            "    pm.expect(pm.response.text()).to.include(\"STUDENT\");\r",
                            "});\r",
                            "\r",
                            "var jsonData = pm.response.json();\r",
                            "pm.environment.set(\"studentToken\", jsonData.token);\r",
                            "pm.environment.set(\"studentId\", jsonData.user.id);"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"email\": \"{{studentEmail}}\",\r\n  \"password\": \"{{studentPassword}}\"\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/sign-in",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "sign-in"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "/sign-in - [T]",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status code is 200\", function () {\r",
                            "    pm.response.to.have.status(200);\r",
                            "});\r",
                            "\r",
                            "pm.test(\"Response time is less than 500 ms\", function () {\r",
                            "    pm.expect(pm.response.responseTime).to.be.below(500);\r",
                            "});\r",
                            "\r",
                            "pm.test(\"Body matches user role - TEACHER\", function () {\r",
                            "    pm.expect(pm.response.text()).to.include(\"TEACHER\");\r",
                            "});\r",
                            "\r",
                            "var jsonData = pm.response.json();\r",
                            "\r",
                            "pm.environment.set(\"teacherToken\", jsonData.token);"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"email\": \"qa1@test.com\",\r\n  \"password\": \"ABC123\"\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/sign-in",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "sign-in"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "/sign-in - [T] - Negative - 404 error",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status code is 404\", function () {\r",
                            "    pm.response.to.have.status(404);\r",
                            "});\r",
                            "\r",
                            "pm.test(\"Response time is less than 500 ms\", function () {\r",
                            "    pm.expect(pm.response.responseTime).to.be.below(500);\r",
                            "});\r",
                            "\r",
                            "pm.test(\"Body matches user role - Authentication failed. User not found or password does not match\", function () {\r",
                            "    pm.expect(pm.response.text()).to.include(\"Authentication failed. User not found or password does not match\");\r",
                            "});"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"email\": \"qa1@test.com\",\r\n  \"password\": \"ABC123456\"\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/sign-in",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "sign-in"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "/users - [T] List of all users",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status code is 200\", function () {\r",
                            "    pm.response.to.have.status(200);\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                    }
                }
            ],
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{teacherToken}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{baseUrl}}/users",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "users"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "/quiz - [T] Creates new quiz",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status code is 200\", function () {\r",
                            "    pm.response.to.have.status(200);\r",
                            "});\r",
                            "\r",
                            "pm.test(\"Response time is less than 2000 ms\", function () {\r",
                            "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
                            "});\r",
                            "\r",
                            "\r",
                            "var jsonData = pm.response.json();\r",
                            "pm.environment.set(\"quizId\", jsonData.id);\r",
                            "\r",
                            "\r",
                            ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                    }
                }
            ],
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{teacherToken}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "POST",
                "header": [],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"name\": \"Demo Olga Black 07/19/24\",\r\n  \"totalScore\": 18,\r\n  \"passingPercentage\": 75,\r\n  \"showStopperQuestion\": 1,\r\n  \"questions\": [\r\n    {\r\n      \"type\": \"TEXTUAL\",\r\n      \"question\": \"What is your name?\",\r\n      \"score\": 5\r\n    },\r\n    {\r\n      \"type\": \"SINGLE_CHOICE\",\r\n      \"question\": \"Which city is city largest in California?\",\r\n      \"score\": 7,\r\n      \"answer\": 2,\r\n      \"hasOtherOption\": false,\r\n      \"options\": [\r\n        \"San Francisco\",\r\n        \"Sacramento\",\r\n        \"Los Angeles\",\r\n        \"Redding\"\r\n      ]\r\n    },\r\n    {\r\n      \"type\": \"MULTIPLE_CHOICE\",\r\n      \"question\": \"Who was apple founded by?\",\r\n      \"score\": 6,\r\n      \"answers\": [\r\n        0,\r\n        1,\r\n        2\r\n      ],\r\n      \"hasOtherOption\": true,\r\n      \"options\": [\r\n        \"Steve Jobs\",\r\n        \"Steve Wozniak\",\r\n        \"Ronald Wayne\",\r\n        \"Ronald Reagan\"\r\n      ]\r\n    }\r\n  ]\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/quiz",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "quiz"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "/quiz - [T] Updating Quiz",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status code is 200\", function () {\r",
                            "    pm.response.to.have.status(200);\r",
                            "});\r",
                            "\r",
                            "pm.test(\"Response time is less than 200 ms\", function () {\r",
                            "    pm.expect(pm.response.responseTime).to.be.below(200);\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                    }
                }
            ],
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{teacherToken}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "PUT",
                "header": [],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"name\": \"Demo Quiz Olga 07/18/24 UPDATED\",\r\n  \"totalScore\": 18,\r\n  \"passingPercentage\": 75,\r\n  \"showStopperQuestion\": 1,\r\n  \"questions\": [\r\n    {\r\n      \"type\": \"TEXTUAL\",\r\n      \"question\": \"What is your name?\",\r\n      \"score\": 5\r\n    },\r\n    {\r\n      \"type\": \"SINGLE_CHOICE\",\r\n      \"question\": \"Which city is city largest in California?\",\r\n      \"score\": 7,\r\n      \"answer\": 2,\r\n      \"hasOtherOption\": false,\r\n      \"options\": [\r\n        \"San Francisco\",\r\n        \"Sacramento\",\r\n        \"Los Angeles\",\r\n        \"Redding\"\r\n      ]\r\n    },\r\n    {\r\n      \"type\": \"MULTIPLE_CHOICE\",\r\n      \"question\": \"Who was apple founded by?\",\r\n      \"score\": 6,\r\n      \"answers\": [\r\n        0,\r\n        1,\r\n        2\r\n      ],\r\n      \"hasOtherOption\": true,\r\n      \"options\": [\r\n        \"Steve Jobs\",\r\n        \"Steve Wozniak\",\r\n        \"Ronald Wayne\",\r\n        \"Ronald Reagan\"\r\n      ]\r\n    }\r\n  ],\r\n  \"id\": 28844\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/quiz",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "quiz"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "/quizzes - [T] List of quizzes",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status code is 200\", function () {\r",
                            "    pm.response.to.have.status(200);\r",
                            "});\r",
                            "\r",
                            "pm.test(\"Response time is less than 500 ms\", function () {\r",
                            "    pm.expect(pm.response.responseTime).to.be.below(500);\r",
                            "});\r",
                            "\r",
                            "\r",
                            ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                    }
                }
            ],
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{teacherToken}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{baseUrl}}/quizzes",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "quizzes"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "/assignment - [T] Create a new Assignment",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status code is 200\", function () {\r",
                            "    pm.response.to.have.status(200);\r",
                            "});\r",
                            "\r",
                            "pm.test(\"Response time is less than 2000 ms\", function () {\r",
                            "    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
                            "});\r",
                            "\r",
                            "var jsonData = pm.response.json();\r",
                            "pm.environment.set(\"assignmentId\", jsonData[0].id)\r",
                            "pm.environment.set(\"assignmentGroupId\", jsonData[0].assignmentGroupID);\r",
                            "\r",
                            "pm.test(\"Verify status, result, and graded by values before submission\", function () {\r",
                            "    pm.expect(jsonData[0].status).to.eql(\"ASSIGNED\");\r",
                            "     pm.expect(jsonData[0].result).to.eql(\"PENDING\");\r",
                            "      pm.expect(jsonData[0].gradedBy).to.eql(\"NONE\");\r",
                            "});\r",
                            "\r",
                            ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                    }
                }
            ],
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{teacherToken}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "POST",
                "header": [],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"quizId\": {{quizId}},\r\n  \"userIds\": [{{studentId}}]\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/assignment",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "assignment"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "/my-assignments - [S]",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status code is 200\", function () {\r",
                            "    pm.response.to.have.status(200);\r",
                            "});\r",
                            "\r",
                            "var myAssignment = pm.environment.get(\"assignmentId\");\r",
                            "\r",
                            "pm.test(\"Verify assignmentId\", function () {\r",
                            "    var jsonData = pm.response.json();\r",
                            "    pm.expect(jsonData[jsonData.length-1].id).to.eql(myAssignment);\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                    }
                }
            ],
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{studentToken}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{baseUrl}}/my-assignments",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "my-assignments"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "/submit-assignment - [S]",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status code is 200\", function () {\r",
                            "    pm.response.to.have.status(200);\r",
                            "});\r",
                            "\r",
                            "pm.test(\"Verify status, result, and gradedBy values after submission\", function () {\r",
                            "    var jsonData = pm.response.json();\r",
                            "pm.expect(jsonData[jsonData.length-1].status).to.eql(\"GRADED\");\r",
                            "\r",
                            "pm.expect(jsonData[jsonData.length-1].result).to.eql(\"PASSED\");\r",
                            "  \r",
                            "pm.expect(jsonData[jsonData.length-1].gradedBy).to.eql(\"AUTOMATIC\");\r",
                            "});"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                    }
                }
            ],
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{studentToken}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "POST",
                "header": [],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"assignmentId\": {{assignmentId}},\r\n    \"answers\": [\r\n        {\r\n            \"textAnswer\": \"Olga\",\r\n            \"answer\": null\r\n        },\r\n        {\r\n            \"textAnswer\": \"\",\r\n            \"answer\": 2\r\n        },\r\n        {\r\n            \"textAnswer\": \"\",\r\n            \"answer\": [\r\n                0,\r\n                1,\r\n                2\r\n            ]\r\n        }\r\n    ]\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/submit-assignment",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "submit-assignment"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "/assignment/:id - [T]",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status code is 200\", function () {\r",
                            "    pm.response.to.have.status(200);\r",
                            "});\r",
                            "\r",
                            "pm.test(\"Verify status, result, and gradedBy values after manual grading\", function () {\r",
                            "    var jsonData = pm.response.json();\r",
                            "pm.expect(jsonData[jsonData.length-1].status).to.eql(\"GRADED\");\r",
                            "\r",
                            "pm.expect(jsonData[jsonData.length-1].result).to.eql(\"PASSED\");\r",
                            "  \r",
                            "pm.expect(jsonData[jsonData.length-1].gradedBy).to.eql(\"TEACHER\");\r",
                            "});"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                    }
                }
            ],
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{teacherToken}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "PUT",
                "header": [],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"summary\": \"Summary from teacher\",\r\n  \"result\": \"PASSED\",\r\n  \"grades\": [\r\n    {\r\n      \"comment\": \"Teacher comment\",\r\n      \"additionalScore\": 5\r\n    }\r\n  ]\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/assignment/{{assignmentId}}",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "assignment",
                        "{{assignmentId}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "/my-grades - [S]",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status code is 200\", function () {\r",
                            "    pm.response.to.have.status(200);\r",
                            "});\r",
                            "\r",
                            "pm.test(\"Response time is less than 200 ms\", function () {\r",
                            "    pm.expect(pm.response.responseTime).to.be.below(200);\r",
                            "});\r",
                            "\r",
                            "\r",
                            "\r",
                            ""
                        ],
                        "type": "text/javascript",
                        "packages": {}
                    }
                }
            ],
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{studentToken}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{baseUrl}}/my-grades",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "my-grades"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "/users [T] - Change group",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status code is 200\", function () {\r",
                            "    pm.response.to.have.status(200);\r",
                            "});\r",
                            "\r",
                            "pm.test(\"Body matches string - User group was updated\", function () {\r",
                            "    pm.expect(pm.response.text()).to.include(\"User group was updated\");\r",
                            "});"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                    }
                }
            ],
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{teacherToken}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "PUT",
                "header": [],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"group\": \"N001\"\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/users/change-group/{{studentId}}",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "users",
                        "change-group",
                        "{{studentId}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "/quiz - [T]",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status code is 200\", function () {\r",
                            "    pm.response.to.have.status(200);\r",
                            "});\r",
                            "\r",
                            "pm.test(\"Message - Quiz was deleted\", function () {\r",
                            "    var jsonData = pm.response.json();\r",
                            "    pm.expect(jsonData.message).to.eql(\t\r",
                            "\"Quiz was deleted\");\r",
                            "});"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                    }
                }
            ],
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{teacherToken}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "DELETE",
                "header": [],
                "url": {
                    "raw": "{{baseUrl}}/quiz/{{quizId}}",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "quiz",
                        "{{quizId}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "/assignment/:id - [T]",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status code is 200\", function () {\r",
                            "    pm.response.to.have.status(200);\r",
                            "});\r",
                            "\r",
                            "pm.test(\"Message - Assignment was deleted\", function () {\r",
                            "    var jsonData = pm.response.json();\r",
                            "    pm.expect(jsonData.message).to.eql(\"Assignment was deleted\");\r",
                            "});"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                    }
                }
            ],
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{teacherToken}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "DELETE",
                "header": [],
                "url": {
                    "raw": "{{baseUrl}}/assignment/{{assignmentGroupId}}",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "assignment",
                        "{{assignmentGroupId}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "/forgot-password - [S]",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status code is 200\", function () {\r",
                            "    pm.response.to.have.status(200);\r",
                            "});\r",
                            "\r",
                            "pm.test(\"Body matches string - Reset password email was sent\", function () {\r",
                            "    pm.expect(pm.response.text()).to.include(\"Reset password email was sent\");\r",
                            "});"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"email\": \"{{studentEmail}}\"\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/forgot-password",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "forgot-password"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "localhost:3000/ -activationCode for reset password",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status code is 200\", function () {\r",
                            "    pm.response.to.have.status(200);\r",
                            "});\r",
                            "\r",
                            "var jsonData = pm.response.json();\r",
                            "\r",
                            "pm.environment.set(\"studentId\", jsonData[0].id);\r",
                            "pm.environment.set(\"activationCode\", jsonData[0].activationCode);"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                    }
                }
            ],
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "localhost:3000/api/users?_where=(email,eq,{{studentEmail}})",
                    "host": [
                        "localhost"
                    ],
                    "port": "3000",
                    "path": [
                        "api",
                        "users"
                    ],
                    "query": [
                        {
                            "key": "_where",
                            "value": "(email,eq,{{studentEmail}})"
                        }
                    ]
                }
            },
            "response": []
        },
        {
            "name": "/reset-password/:id/:actCode - [S]",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status code is 200\", function () {\r",
                            "    pm.response.to.have.status(200);\r",
                            "});\r",
                            "\r",
                            "pm.test(\"Message - Password was changed\", function () {\r",
                            "    var jsonData = pm.response.json();\r",
                            "    pm.expect(jsonData.message).to.eql(\"Password was changed\");\r",
                            "});"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [],
                "body": {
                    "mode": "raw",
                    "raw": "{\r\n  \"password\": \"muNewPassword\"\r\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/reset-password/{{studentId}}/{{activationCode}}",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "reset-password",
                        "{{studentId}}",
                        "{{activationCode}}"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "/users/:id ",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status code is 200\", function () {\r",
                            "    pm.response.to.have.status(200);\r",
                            "});\r",
                            "\r",
                            "pm.test(\"Body matches string - User was deleted\", function () {\r",
                            "    pm.expect(pm.response.text()).to.include(\"User was deleted\");\r",
                            "});"
                        ],
                        "type": "text/javascript",
                        "packages": {}
                    }
                }
            ],
            "request": {
                "auth": {
                    "type": "bearer",
                    "bearer": [
                        {
                            "key": "token",
                            "value": "{{teacherToken}}",
                            "type": "string"
                        }
                    ]
                },
                "method": "DELETE",
                "header": [],
                "url": {
                    "raw": "{{baseUrl}}/users/{{studentId}}",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "users",
                        "{{studentId}}"
                    ]
                }
            },
            "response": []
        }
    ]
}
